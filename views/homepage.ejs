

<!-- NOTE: Normally, this JS block will be in a separate .js file to achieve a clearer separation of concerns between view and logic  -->
<script type="text/javascript">

  (function(data){
    
    document.addEventListener("DOMContentLoaded", function(event) { 
        // On DOM Ready build chart. 
        buildRankingsChart();

    });

    function buildRankingsChart(){

      <% if(typeof rankingsData == 'object') { %>

        // Give search engine ranking color
        var googleColorPref = "34, 16, 100"; 
        var googleBaseColorPref = "51, 10, 198";
        var yahooColorPref = "198, 10, 63";
        var bingColorPref = "157, 118, 21"; 

        // Create the Chart data object.
        var lineChartData = {
            labels: [],
            datasets: [
                {
                    label: "Google",
                    fillColor: "rgba("+googleColorPref+",0.2)",
                    strokeColor: "rgba("+googleColorPref+",1)",
                    pointColor: "rgba("+googleColorPref+",1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba("+googleColorPref+",1)",
                    data: []
                },
                {
                    label: "Google Base",
                    fillColor: "rgba("+googleBaseColorPref+",0.2)",
                    strokeColor: "rgba("+googleBaseColorPref+",1)",
                    pointColor: "rgba("+googleBaseColorPref+",1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba("+googleBaseColorPref+",1)",
                    data: []
                },
                {
                    label: "Yahoo",
                    fillColor: "rgba("+yahooColorPref+",0.2)",
                    strokeColor: "rgba("+yahooColorPref+",1)",
                    pointColor: "rgba("+yahooColorPref+",1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba("+yahooColorPref+",1)",
                    data: []
                },
                {
                    label: "Bing",
                    fillColor: "rgba("+bingColorPref+",0.2)",
                    strokeColor: "rgba("+bingColorPref+",1)",
                    pointColor: "rgba("+bingColorPref+",1)",
                    pointStrokeColor: "#fff",
                    pointHighlightFill: "#fff",
                    pointHighlightStroke: "rgba("+bingColorPref+",1)",
                    data: []
                }
            ]
        };
   
        // Arrays to store the ranking data 
        var lineGoogle = [];
        var lineGoogleBase = [];
        var lineYahoo = [];
        var lineBing = []; 

        // Populate the ranking datasets for each search egnine 
        <% _.each(rankingsData, function (ranking) { %>

            var rankGoogle = <%= ranking.rank_google %>;
            var rankGoogleBase = <%= ranking.rank_google_base %>;
            var rankYahoo = <%= ranking.rank_yahoo %>;
            var rankBing = <%= ranking.rank_bing %>;
        
            // Push ranking data for each search engine 
            lineGoogle.push(rankGoogle); 
            lineGoogleBase.push(rankGoogleBase); 
            lineYahoo.push(rankYahoo); 
            lineBing.push(rankBing); 

            // Add ranking date as the x axis Label for chart
            var rankDate = "<%= ranking.rank_date %>";
            lineChartData.labels.push(rankDate);  
            
        <% }) %>
      
        lineChartData.datasets[0].data = lineGoogle; 
        lineChartData.datasets[1].data = lineGoogleBase;  
        lineChartData.datasets[2].data = lineYahoo;  
        lineChartData.datasets[3].data = lineBing;   
   
        var ctx = document.getElementById("rankings-chart").getContext("2d");
        var rankingsChart = new Chart(ctx , {
          type: "line",
          data: lineChartData, 
        }); 

      <% } %>
    }
  })();

</script>

<div class="container">
  
  <h3>STAT Rankings</h3>

  <hr/>

  <h5>Load CSV Data</h5>
  <form action="<%=sails.getBaseUrl()%>/rankings/upload" method="post" enctype="multipart/form-data">
    <div class="row">
      <div class="four columns">
        <input type="file" name="uploadStatData" id="uploadStatData" accept=".csv"  required/> <!-- Only accept *.csv files -->
      </div>
      <div class="two columns"> 
        <input type="submit" value="Load Data" />
      </div>
    </div>
  </form> 
  <div class="row" id="csv-loaded-msg">
    <div class="four columns">
      <% if(typeof csvLoadedMsg == 'object') { %>
        <%= csvLoadedMsg %>
      <% } %>
    </div>
  </div>

  <hr/>

  <h5>Visualize Rankings</h5>
  <form action="<%=sails.getBaseUrl()%>/rankings/findRankingsForDates" method="get">
    <div class="row"> 
      <div class="four columns">
        <label for="fromDate">From Date ('yyyy-mm-dd')</label>
        <input type="text" name="fromDate" id="fromDate" required/>
      </div>
      <div class="four columns">
        <label for="toDate">To Date('yyyy-mm-dd')</label>
         <input type="text" name="toDate" id="toDate" required/> 
      </div>
    </div>
    <div class="row">
      <div class="six columns">
          <input type="submit" value="Update View" /> 
      </div>
    </div>
  </form>
  <div class="row">
      <div class="twelve columns">
          <h5>Rankings</h5>
          <div class="loader-img"></div>
          <div id="engine-rankings">
            <canvas id="rankings-chart">
              <!-- Placeholder container for the Ranking chart to be injected -->
            </canvas> 
          </div>
      </div>

  </div>
  <div class="row">
      <div class="twelve columns"> 
        <h5>Weighted Rankings</h5>
        <div id="weighted-engine-rankings">
          <!-- NOTE: 
            Chart for Weighted Rankings is not created due to time limitations.
            However, the data is being generated in the RankingsController.js and passed to the homepage.ejs view. 

            Please refer to the command prompt output for 
          -->  
        </div>
    </div>
  </div>
</div>